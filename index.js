//libs
const Telegraf = require('telegraf');
const mongoose = require('mongoose')
const Markup = require('telegraf/markup')
const Stage = require('telegraf/stage')
const Scene = require('telegraf/scenes/base')
const session = require('telegraf/session')
const Keyboard = require('telegram-keyboard')
const sorter = require('./sorter.js')

const {
  enter,
  leave
} = Stage
const kboptions = {
    inline: true,
    duplicates: true,
    newline: true
  }
const kbexit = new Keyboard(kboptions)
kbexit.add('‚ùå –í—ã–π—Ç–∏:quit')
const kbhint = new Keyboard(kboptions)
kbhint.add('‚ùì –ü–æ–¥—Å–∫–∞–∑–∫–∞:hint')
//models
const Quest = require('./models/quest')
const Question = require('./models/question')
const Winner = require('./models/winner')
const Coupon = require('./models/coupon')

//tokens
const bot = new Telegraf(process.env.BOT_TOKEN)
const mongo = "mongodb+srv://admin:1913b7cd@museumbot-bebcr.mongodb.net/test?retryWrites=true&w=majority"

//strings
const wrongAnswer = ['–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.', '–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòâ', '–≠—Ö, –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üòí. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑', '–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ –ø—ã—Ç–∫–∞, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—É–¥–∞—á–Ω–∞—è üôÉ', '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫, –ø–æ–¥—É–º–∞–π –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ üßê']
const winnerMessage = '–û—Ç–ª–∏—á–Ω–æ. –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /exit, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.'

//db connect
async function dbconnect() {
  try {
    await mongoose.connect(mongo, {
      useNewUrlParser: true,
    })
  } catch (e) {
    console.log(e)
  }
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}


async function getquests() {
  quests = await Quest.find({
    isactive: true
  })
  return quests
}
async function getquestions(id) {
  questions = await Question.find({
    questid: id
  })
  quest = await Quest.findById(id)
  if (quest.islinear){
  questions.sort(sorter('order_num'))
} else {
  shuffle(questions)
}
  return questions
}


async function bothandlers() {
  let state = {}


const ismuseumkb = new Keyboard(kboptions)
ismuseumkb.add('üèõ –Ø –≤ –º—É–∑–µ–µ:inmuseum')
ismuseumkb.add('üñ• –Ø –∏—Å–ø–æ–ª—å–∑—É—é VR-—Ç—É—Ä:invr')


//main menu actions
const menuScene = new Scene('menu')
  menuScene.action('about', ctx => {
    ctx.reply('–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ @JARM_official (—Å) 2020')
  })
  menuScene.action('help', ctx => {
    ctx.reply('‚ùó –í –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–µ—à–∏—Ç—å —á–µ—Ä–µ–¥—É –∑–∞–≥–∞–¥–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å–ø–æ–Ω–∞—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –∑–∞–ª–∞–º –º—É–∑–µ—è –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤ –∏–º. –ü—É—à–∫–∏–Ω–∞. –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–≥–∞–¥–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º. –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –í–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –æ—á–∫–∏, –∞ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - —Å–Ω–∏–º–∞—Ç—å—Å—è. –ö–æ–ø–∏—Ç–µ –æ—á–∫–∏, –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã! –£–¥–∞—á–∏! ‚úä')
  })
  menuScene.action('prize', ctx => {
    ctx.reply('–ö–∞–∂–¥—ã–µ 5 —É—Ä–æ–≤–Ω–µ–π –í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ-–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É –≤ —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –º—É–∑–µ—è. –ö–∞–∂–¥–∞—è –ø–æ—Å–ª–µ–¥—É—é—â–∞—è —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è! –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –í–∞–º–∏ –∫–æ–¥—ã –í—ã –º–æ–∂–µ—Ç–µ –≤ –º–µ–Ω—é "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"')
  })
menuScene.action('contact', ctx => {
  ctx.reply('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ @JARM_official')
  })
menuScene.action('settings', ctx => {
    ctx.reply('–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', ismuseumkb.draw())
  })
menuScene.action('inmuseum', ctx=>{
      const userId = ctx.callbackQuery.from.id
      state[userId].isvr = false
      ctx.reply('–û—Ç–ª–∏—á–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /back')
    })
menuScene.action('invr', ctx=>{
      const userId = ctx.callbackQuery.from.id
      state[userId].isvr = true
      ctx.reply('–û—Ç–ª–∏—á–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /back')
    })
menuScene.action('level', async ctx=>{
  const userId = ctx.callbackQuery.from.id
  user = state[userId].user
  coupons = await Coupon.find({userid: state[userId].user_id, isactive: true})
 ctx.reply(`–í–∞—à —É—Ä–æ–≤–µ–Ω—å - ${user.lvl}`)
 ctx.reply(`–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è ${state[userId].user.nextLvl() - state[userId].user.xp} –æ—á–∫–æ–≤`)
 if (coupons && (coupons.length > 0)){
   ctx.reply(`–ú–æ–∏ –∫—É–ø–æ–Ω—ã –Ω–∞ —Å–∫–∏–¥–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ú—É–∑–µ—è:`)
   coupons.forEach(function(item){
     ctx.reply(`–ö–æ–¥: ${item.coupon} - ${item.discount}%`)
   })
 }
})

  menuScene.command('begin', ctx => {
    const userId = ctx.message.from.id
    if (state[userId].quest){
    ctx.scene.leave()
    ctx.scene.enter('workflow')
  } else {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!')
  }
  })
  menuScene.command('back', ctx => {
    ctx.scene.reenter('menu')
  })

  //main menu quest list and keyboard build
  menuScene.enter(async ctx =>  {
    var quests = await getquests()
    const keyboard = new Keyboard(kboptions)
    quests.forEach(function(item) {
      keyboard.add(item.quest_name + ':' + item.quest_name)
      menuScene.action(item.quest_name, async (ctx) => {
        const userId = ctx.callbackQuery.from.id
        if (!state[userId]) state[userId] = {
          id: userId
        }
        state[userId].question = 0
        state[userId].questions = null
        state[userId].quest = item._id
        state[userId].score = 0
        state[userId].win_msg = item.quest_end
        await ctx.reply(item.quest_desc)
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ /begin –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ /back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é')
      })
    })
    keyboard.add('üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:level')
    keyboard.add('‚ùì –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:help')
    keyboard.add('üí∞ –ü—Ä–∏–∑—ã:prize')
    keyboard.add('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:settings')
    keyboard.add('üì£ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:contact')
    keyboard.add('üíª –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:about')
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞! –ï—Å–ª–∏ –≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è –∏–≥—Ä—ã VR-—Ç—É—Ä, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"', keyboard.draw())
  })

//workflow
  const workflowScene = new Scene('workflow')
  workflowScene.enter(async (ctx) => {
    const userId = ctx.message.from.id
    questionList = await getquestions(state[userId].quest)
    state[userId].questions = questionList
    if (state[userId].questions[0].image){
    await ctx.replyWithPhoto( {source: state[userId].questions[state[userId].question].image} )
    }
    if (state[userId].isvr && state[userId].questions[0].vr_link) {
      await ctx.reply(state[userId].questions[0].question_text)
      await ctx.reply('–î–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ–Ω–∞—Ç –≤ VR-—Ç—É—Ä–µ –º—É–∑–µ—è: '+state[userId].questions[0].vr_link, kbexit.draw())
    } else {
      await ctx.reply(state[userId].questions[0].question_text, kbexit.draw())
    }

  })
  workflowScene.on('text', async ctx => {
    const userId = ctx.message.from.id
    if (ctx.message.text == '/exit') {
      if (state[userId].score>0){
        state[userId].user.xp+=state[userId].score
        if (state[userId].user.xp>=state[userId].user.nextLvl()){
          while (state[userId].user.xp>=state[userId].user.nextLvl()) {
           state[userId].user.xp-=state[userId].user.nextLvl()
           state[userId].user.lvl+=1
           await ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –í–∞—à —É—Ä–æ–≤–µ–Ω—å - ${state[userId].user.lvl}. –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è - ${state[userId].user.nextLvl() - state[userId].user.xp} –æ—á–∫–æ–≤`)

           if(((state[userId].user.lvl)%5) == 0){
           coupon = new Coupon ({
            userid: state[userId].user._id
           })
           coupon.generate(state[userId].user.lvl)
           await coupon.save()
           await ctx.reply(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑ - –∫—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ –º—É–∑–µ—è! –ö—É–ø–æ–Ω: ${coupon.coupon}. –°–∫–∏–¥–∫–∞ - ${coupon.discount}%. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`)
        }

        }
      } else {
        await ctx.reply(`–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${state[userId].score} –æ—á–∫–æ–≤. –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è - ${state[userId].user.nextLvl() - state[userId].user.xp} –æ—á–∫–æ–≤`)
      }
      }else {
        await ctx.reply(`–í—ã –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è`)
      }
      state[userId].questions = null
      state[userId].question = 0
      state[userId].quest = null
      state[userId].score = 0
      await state[userId].user.save()
      ctx.scene.leave()
      ctx.scene.enter('menu')
    }else{
    if (state[userId].question < state[userId].questions.length) {
      ans = ctx.message.text.toLowerCase()
      answers= questions[state[userId].question].answer.split(';')
      flag = false
      answers.forEach(function(item){
        flag = false || ans===(item)
      })
      if (flag) {
        if (state[userId].questions[state[userId].question].ans_image){
          await ctx.replyWithPhoto( {source: state[userId].questions[state[userId].question].ans_image} )
        }
        await ctx.reply(state[userId].questions[state[userId].question].answer_output)
        if (state[userId].question == (state[userId].questions.length-1)){
          if (state[userId].win_msg) {
          await ctx.reply(state[userId].win_msg, kbexit.draw())
        } else {
          await ctx.reply(winnerMessage, kbexit.draw())
        }
          state[userId].question +=1
        } else {
        state[userId].score += state[userId].questions[state[userId].question].correct_score
        state[userId].question +=1
        if (state[userId].questions[state[userId].question].image){
          await ctx.replyWithPhoto( {source: state[userId].questions[state[userId].question].image} )
        }
        if (state[userId].isvr && state[userId].questions[state[userId].question].vr_link) {
          await ctx.reply(state[userId].questions[state[userId].question].question_text)
          await ctx.reply('–î–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ–Ω–∞—Ç –≤ VR-—Ç—É—Ä–µ –º—É–∑–µ—è: '+state[userId].questions[state[userId].question].vr_link, kbexit.draw())
        } else {
          await ctx.reply(state[userId].questions[state[userId].question].question_text, kbexit.draw())
        }
      }
      } else {
        await ctx.reply(wrongAnswer[Math.floor(Math.random() * wrongAnswer.length)], kbexit.draw())
        state[userId].score += state[userId].questions[state[userId].question].wrong_score
        if (state[userId].questions[state[userId].question].hint){
        await ctx.reply('–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É! –û–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–Ω–∏–º–µ—Ç –±–∞–ª–ª—ã...', kbhint.draw())
          console.log(state[userId].questions[state[userId].question].hint)
      }
      }
    }
  }
  })
  workflowScene.action('quit', ctx => {
    ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit')
  })
  workflowScene.action('hint', async ctx =>  {
    const userId = ctx.callbackQuery.from.id
    console.log(state[userId].questions[state[userId].question].hint)
    await ctx.reply(state[userId].questions[state[userId].question].hint)
    state[userId].score += state[userId].questions[state[userId].question].hint_score
  })

//launching
  const stage = new Stage([menuScene, workflowScene], {
    ttl: 10000000
  })
  bot.use(session())
  bot.use(stage.middleware())
  bot.start(async ctx =>  {
    ctx.scene.enter('menu')
    const userId = ctx.message.from.id
    user = await Winner.findOne({userid: userId})
    if (!user){
        user =  new Winner ({
        userid: userId,
        username: ctx.message.from.username
      })
      await user.save()
    }
    if (!state[userId]){
      state[userId] = {
        id: userId,
        user: user
      }
    } else {
      state[userId].user = user
    }
    state[userId].isvr = false
  })

}
dbconnect()
bothandlers()



//bot.launch()

bot.startPolling();
